#!/usr/bin/perl

use strict;
use warnings; 
use 5.010;

use lib '../lib';
use lib 'lib';
use lib '/root/syspolice/lib';
use Police::Edit; 
use Police::Log; 
use Police::Conf; 
use Police::Scan::Dir; 
use Police::Server;
use File::Basename;
use Getopt::Std;
use Data::Dumper;

my $VERSION	= "3.2.0";
my %OPTS = (
  'd' => '0',
  'q' => '0',
  'c' => '/police/config'
);


sub usage() {
	printf "Police server, usage: \n\n";
	printf "     %s [ <options> ] <action> <system> <system> ... \n\n", basename($0);
	printf "Oprions:\n";
	printf "    -m        : send the result through an email instead of print to stdout \n";
	printf "    -e        : send the empty reports \n";
	printf "    -q        : quite mode, do not show the progress bar  \n";
	printf "    -d <num>  : debug level, default value is 0  \n";
	printf "    -c <dir>  : change the default base directory where configs are placed (default: %s)  \n", $OPTS{'c'};
	printf "    -p <num>  : perform the paraell check operation, num identifies the number of process run in concurency. This option turns on the -q and -m option   \n\n";
	printf "    -f <filter>  : filter for sync action. Filter can be specied as file pattern or package name. Regexp can be also used. \n\n";
	printf "Actions:   \n";
	printf "    diff      : print diff (the client and server action must be run before it)  \n";
	printf "    check     : client + server + diff action blended into one command   \n";
	printf "    download  : download differend files from the client side   \n";
	printf "    config    : show options taken from the config file(s)   \n";
	printf "    dumpdb    : dump diff database   \n";
	printf "    ksinstall : prepare data for system kickstart installation   \n";
	printf "    getlst    : create .xml list file based on the diff from the previous run  \n";
	printf "    commit    : commit changes in te file system (creates YYYY-MM-DD.HH.MM.SS-commit.xml list file into %%{commitdir})   \n";
	printf "    statistics : print statistics related to system   \n";
	printf "    sync      : sync the client according to the server. Option -f can be used with this action  \n";
	printf "    request   : dispaly request for police-client \n";
	printf "    <system>  : the config name for the system (list), can by replaced by string all    \n\n";
	printf "Version: %s\n", $VERSION;

	exit 1;	
}

sub main($) {
  my $PARALLEL = 1;
  my $FORKS = 0;

  if ( !getopts("?emqd:c:p:f:",\%OPTS) || $OPTS{'?'}) {
  	printf "Unknown option\n";
  	usage();
  };

  if ($OPTS{'p'} && $OPTS{'p'} > 0) {
    $PARALLEL = $OPTS{'p'};
    $OPTS{'q'} = 1;		# quiet mode
    $OPTS{'m'} = 1;		# mail mode
  }

  my $LOG =  Police::Log->new(ShowDebug => $OPTS{'d'}, ShowProgress => !$OPTS{'q'}, ErrStdOut => !$OPTS{'q'});
  my $EDIT = Police::Edit->new();
  
  if (! -d $OPTS{'c'}) {
    $LOG->Error("Can't change to directory  %s", $OPTS{'c'});
    exit 1;
  }

  my $CMD = shift @ARGV;
  my %SYSTEMS = ();

  foreach (@ARGV) {
     $SYSTEMS{$_} = 1;
  }

  # check if the command and list of hosts is set 
  if (!defined($CMD) || $CMD eq "" || !%SYSTEMS || keys(%SYSTEMS) == 0) {
    usage();
  }

  my %SRV; # the hash where the server instances are stored 

  $LOG->ProgressInit("loading the configuration ##");

  foreach my $system (glob($OPTS{'c'}."/*")) {
    next if ( ! -f  $system );
    $system = basename($system);
    if ($system =~ /^([\-\w\d\.]+)$/) {
      $system = $1;       # $data now untainted
    } else {
      $LOG->Error("Invalid characters in system file name %s.", $system);
      next;
    }
    next if ( ! defined($SYSTEMS{$system}) && !$SYSTEMS{'all'} );
    $LOG->ProgressStep($system);
    $LOG->Debug(10, "loading the configuration for %s", $system);
    $SRV{$system} = Police::Server->new($system, CfgDir => $OPTS{'c'}, Log => $LOG, Edit => $EDIT, Filter => $OPTS{'f'} );
    delete($SYSTEMS{$system});
  }

  $LOG->ProgressStep("done\n");

  foreach (keys %SYSTEMS) {
    next if ($_ eq 'all');
    $LOG->Error("Configuration file not found for %s in dir %s", $_, $OPTS{'c'});
  }

  foreach my $system (sort keys %SRV) {
    if ($system =~ /^([\-\w\d\.]+)$/) {
      $system = $1;       # $data now untainted
    } else {
      $LOG->Error("Invalid characters in system name.");
      next;
    }

    #print "$PARALLEL $FORKS $system\n";
    #print Dumper %SRV;
    next if (!defined($SRV{$system}));
    
    my $pid;

    if ($PARALLEL) {
      # wait for a free process
      if ($FORKS >= $PARALLEL) {
        $pid=wait();
        $FORKS--;
      }
      $pid=fork();
      next if (not defined $pid);
      if ($pid) {
        #parent
        $FORKS++;
      } else {
        #child
        print "child $CMD \n";
        $LOG->Prefix($system.": ") if (scalar(keys(%SRV)) > 1) ;
        if ($CMD eq "check") {
          $SRV{$system}->Check();
          $SRV{$system}->SendReport($OPTS{'m'}, $OPTS{'e'});
          $SRV{$system}->MkBkpDiffReport();
          $SRV{$system}->SendReport($OPTS{'m'}, $OPTS{'e'});
        } elsif ($CMD eq "diff") {
          #$SRV{$system}->MkDiff();
          $SRV{$system}->MkBkpDiffReport();
          $SRV{$system}->SendReport($OPTS{'m'}, $OPTS{'e'});
        } elsif ($CMD eq "backup") {
        } elsif ($CMD eq "statistics") {
          $SRV{$system}->Report("\nStatistics for %s:\n", $system);
          $SRV{$system}->Report($SRV{$system}->StatPrint());
          $SRV{$system}->SendReport();
        } elsif ($CMD eq "download") {
          $SRV{$system}->Download();
        } elsif ($CMD eq "ksinstall") {
          $SRV{$system}->PrepareInstall();
        } elsif ($CMD eq "config") {
          $SRV{$system}->GetConfig();
        } elsif ($CMD eq "dumpdb") {
          $SRV{$system}->DumpDb();
        } elsif ($CMD eq "getlst") {
          $SRV{$system}->GetLst();
        } elsif ($CMD eq "commit") {
          $SRV{$system}->Commit();
        } elsif ($CMD eq "sync") {
          $SRV{$system}->SyncClientPrepare();
        } elsif ($CMD eq "request") {
          if (!$SRV{$system}->BuildRequestFile()) {
            $LOG->Error("Can't build request fil for %s", $system);
            return 0;
          } else {
            my $reqfile = sprintf("%s/request.xml", $SRV{$system}->{WorkDir} );
            open F1, "<$reqfile";
            while (<F1>) { print $_; }
            close F1;
          }
        } else {
          $LOG->Error("Unknow command %s \n", $CMD);
        }

        exit;
        # child end
      }
    }
  }

  #wait for other processess
  for (1 .. $FORKS) {
    my $pid=wait();
  }

  # 2nd phase of "sync" command
  if ($CMD eq "sync") {
    if (!$EDIT->EditList()) {
      exit 0;
    }

    foreach my $system (sort keys %SRV) {
      next if (!defined($SRV{$system}));
      $LOG->Prefix($system.": ") if (scalar(keys(%SRV)) > 1) ;
      $SRV{$system}->SyncClientPerform();
    }
  }
}

main(@ARGV);
