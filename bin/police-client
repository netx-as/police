#!/usr/bin/perl -w
package Police::Log;

use strict;
use warnings;

use Sys::Syslog qw(:DEFAULT setlogsock);
use POSIX qw(strftime setsid);

=head1 NAME

Log - layer provides function to logging and debuging 

=head1 SYNOPSIS

=head1 DESCRIPTION
The class provides logging support 

=head1 METHODS

=head2 new
	new->(Facility => 'daemon.info', LogPrefix => 'prefix', Ddebug => 0);
	DEBUG - set debug level to show via Debug(<num>, string);

=cut

sub new {
	my ($self, %params) = @_;
	my ($class) = {};
	bless($class);

	# defaul values
	$class->{Facility} = defined($params{Facility}) ? $params{Facility} : 'daemon.info';
	$class->{LogPrefix} = defined($params{LogPrefix}) ? $params{LogPrefix} : substr($0, rindex($0, '/') + 1, length($0));
	$class->{Prefix} = defined($params{Prefix}) ? $params{Prefix} : "";
	$class->{ShowDebug} = defined($params{ShowDebug}) ? $params{ShowDebug} : 0;
	$class->{LogStdOut} = defined($params{LogStdOut}) ? $params{LogStdOut} : 0;
	$class->{ErrStdOut} = defined($params{ErrStdOut}) ? $params{ErrStdOut} : 0;
	$class->{ShowProgress} = defined($params{ShowProgress}) ? $params{ShowProgress} : 1;

	$class->{ProgressPos} = 50;
	$class->{Prefix} = "";

	return $class;
}

=head2 Log

Wite information to the system log

=cut

sub Log {
	my ($self, $msg, @par) = @_;

    my $lmsg = $self->{Prefix}.sprintf($msg, @par);
    if ($self->{LogStdOut} > 0) {
        printf "%s[%d]: %s\n", strftime("%Y-%m-%d.%H:%M:%S", localtime), $$, $lmsg;
    }
    setlogsock('unix');
    openlog($self->{LogPrefix}."\[$$\]", 'ndelay', 'user');
    syslog($self->{Facility}, $lmsg);
}

=head2 Prefix

Set prefix for all messages 

=cut

sub Prefix {
	my ($self, $prefix) = @_;

	$prefix = "" if (!defined($prefix));

	$self->{Prefix} = $prefix;
}

=head2 Error

Wite information to the system log and stderr

=cut

sub Error {
	my ($self, $msg, @par) = @_;

	printf STDERR  $self->{Prefix}.$msg."\n", @par if ($self->{ErrStdOut} > 0);
	$self->Log($msg, @par);
}

=head2 Debug

Write debug information to log if the number is less than ShowDebug constant

=cut

sub Debug {
	my ($self, $num, $msg, @par) = @_;
	
	return if ($num > $self->{ShowDebug});
	$self->Log($msg, @par);
}

=head2 Progress

Clear the message which was previously written on the screen and write a new one 

=cut

sub Progress {
	my ($self, $msg, @par) = @_;

	return if (!$self->{ShowProgress});

	my $lmsg = $self->{Prefix}.sprintf($msg, @par);

	$self->{PROGRESSLN} = "" if (!defined($self->{PROGRESSLN}));
    
	if ($self->{PROGRESSLN} ne $lmsg) {
		my $blank = length($self->{PROGRESSLN}) - length($lmsg);
		$blank = 0 if ($blank < 0);

		my $prev = $|;
		$| = 1;
		my $br = "";
		if ($lmsg =~ /(.*)(\n*)$/) {
			($lmsg, $br) = ($1, $2);
		}
		$lmsg =~ /(.*)(\n*)$/;
		printf("%s%s%s%s", $lmsg, " " x $blank, "\b" x (length($lmsg) + $blank), $br);
		
		$| = $prev;	
		$self->{PROGRESSLN} = $lmsg." ";
	}
}

=head2 ProgressInit

Initaliaze the progress bar. The position where the t
step bat shoul be shwon can be signed as ## or ##nn where nn sets position on the screen 

=cut

sub ProgressInit {
	my ($self, $msg, @par) = @_;

	$self->{ProgressBase} = sprintf($msg, @par);

}

=head2 ProgressPos

Set the progess position on the screen 

=cut

sub ProgressPos {
	my ($self, $pos) = @_;

	$self->{ProgressPos} = $pos;

}

=head2 ProgressStep

Do one step on theprogress. The basic message must be set by the ProgressInit
step bat shoul be shwon can be signed as ##

=cut

sub ProgressStep {
	my ($self, $msg, @par) = @_;

	my $step = sprintf($msg, @par);
	my $progress = $self->{ProgressBase};

	my $ch = " ";
	if ($progress =~ /(.)##/) {
		$ch = $1;
	}

	$step = $ch x ($self->{ProgressPos} - length($self->{Prefix}) - length($progress)).$step; 
	$progress =~ s/##/$step/g;

	$self->Progress("%s", $progress);

}

1;

package Police::Scan::Dir;

use strict;
use warnings;

use POSIX qw(strftime setsid);
use Data::Dumper;
use File::Basename;
use Fcntl ':mode';
#use File::Glob ':glob';
use File::Temp qw(tempfile);
use Cwd;


=head1 NAME

Sacn - layer provides scannig directory functionality

=head1 SYNOPSIS

=head1 DESCRIPTION
The class provides directory scanning functionality

=head1 METHODS

=head2 new
	new->(Log => log_handle, ScanHook => &subrutine);
	Log => reference to log class
	ScanHook => reference to subrutine which is called after the file is scanned 
	FilesRef => reference to hash to fill with the scanned structure 
	the structure of the hook shoul be follow 
	sub function($$) {
		my ($class, $file, $ref) = @_;
	}
	$class - reference to class where subrutine is called
	$file - the file name
	$ref - reference to values of the scanned attributes 

=cut

sub new {
	my ($self, %params) = @_;
	my ($class) = {};
	bless($class);


	# set log handle  or create the new one
	if (!defined($params{Log})) {
		$class->{Log} = Police::Log->new();
	} else {
		$class->{Log} = $params{Log};
	}
	if (defined($params{ScanHook})) {
		$class->{ScanHook} = $params{ScanHook};
	}

	if (defined($params{FilesRef})) {
		$class->{FilesRef} = $params{FilesRef};
	}
	if (defined($params{Parrent})) {
		$class->{Parrent} = $params{Parrent};
	}
	if (defined($params{Config})) {
		$class->{Config} = $params{Config};
	}

	$class->{Checksum} = "md5";

	# where the paths definition are stored
	$class->{Paths} = Police::Paths->new(); 

	return $class;
}

=head2 LsMode

Converts numeric file mode into text representation known from ls command

=cut

sub LsMode($$) {
	my ($self, $mode) = @_;

	if (!defined($mode)) {
		return "??????????";
	}

	my @flag;

	$flag[0] = S_ISDIR($mode) ? 'd' : '-';
	$flag[0] = 'l' if (S_ISLNK($mode));
	$flag[0] = 'b' if (S_ISBLK($mode));
	$flag[0] = 'c' if (S_ISCHR($mode)) ;
	$flag[0] = 'p' if (S_ISFIFO($mode));
	$flag[0] = 's' if (S_ISSOCK($mode));

	$flag[1] = ($mode & S_IRUSR) >> 6 ? 'r' : '-';
	$flag[2] = ($mode & S_IWUSR) >> 6 ? 'w' : '-';
	$flag[3] = ($mode & S_IXUSR) >> 6 ? 'x' : '-';
	$flag[3] = 's' if ($mode & S_ISUID);

	$flag[4] = ($mode & S_IRGRP) >> 3 ? 'r' : '-';
	$flag[5] = ($mode & S_IWGRP) >> 3 ? 'w' : '-';
	$flag[6] = ($mode & S_IXGRP) >> 3 ? 'x' : '-';
	$flag[6] = 's' if ($mode & S_ISGID);

	$flag[7] = ($mode & S_IROTH) >> 0 ? 'r' : '-';
	$flag[8] = ($mode & S_IWOTH) >> 0 ? 'w' : '-';
	$flag[9] = ($mode & S_IXOTH) >> 0 ? 'x' : '-';
	$flag[9] = 't' if ($mode & S_ISVTX);

#   ($mode & S_IRGRP) >> 3;

	return join('', @flag);
}

=head2 Md5Sum

Compute and return MD5 sum of the file

=cut
sub Md5Sum($$) {
	my ($self, $file) = @_;
	my ($fh, $digest);

	# load md5 module
	if (!$self->{Loaded}->{MD5}) {
		use Digest::MD5 qw(md5 md5_hex md5_base64);
		$self->{Loaded}->{MD5} = 1;
	}

	my $ctx = Digest::MD5->new;
	open $fh, "< $file";
	if ($fh) {
		my $ret = eval { $ctx->addfile(*$fh); };
		if (defined($ret)) {
			$digest = $ctx->hexdigest;
		} else {
			$digest = "*UNKNOWN*";
		}
	}

	return $digest;

}

=head2 ShaSum

Compute and return Sha256 sum of the file

=cut
sub ShaSum($$) {
	my ($self, $file) = @_;
	my ($fh, $digest);

	# load md5 module
	if (!$self->{Loaded}->{SHA}) {
		use Digest::SHA qw(sha256 sha256_hex sha256_base64);
		$self->{Loaded}->{SHA} = 1;
	}

	my $ctx = Digest::SHA->new(256);
	open $fh, "< $file";
	if ($fh) {
		my $ret = eval { $ctx->addfile(*$fh); };
		if (defined($ret)) {
			$digest = $ctx->hexdigest;
		} else {
			$digest = "*UNKNOWN*";
		}
	}

	return $digest;

}

=head2 RecursiveScanDir

Perform recrusive dir scanning. The method is called internally by the other functions
	@paths => list of paths in the format [+|-atts]/path where 

=cut


# scan a directory and resturn structure
# @ reference where a output structure should be stored
# @ package name
# @ start directory
# @ reference to path definition
sub RecursiveScanDir {
    my ($self, $package, $dir) = @_;

    if ($dir eq "") {
        $dir = ".* *";
    } else {
		$dir = "\"$dir/.*\" \"$dir/*\"";
    }

    while ($dir =~ /\/\//) {
        $dir =~ s/\/\//\//g;
    }

	my $pwd = cwd();

LOOP:
    foreach my $rfile (glob($dir)) {
#		printf "XXX $rfile\n";
		next if (substr($rfile, -2) eq ".." || substr($rfile, -1) eq ".");
        my $file = sprintf("/%s", $rfile);

        # get flags
        my %flags = $self->{Paths}->GetPathFlags($file);

        # skip if no flags were set
        if (keys(%flags) == 0) {
#           $self->{Log}->Progress("Skipping: %s", $file);
#           printf("\n\nSkipping: %s\n\n", $file);
            next;
        }

        # store a information about file
        my @inode = lstat($rfile);

#        $self->{Log}->Progress("Scanning: [+%s] %s", join('', sort keys %flags), $file);
#       printf("Scanning: [+@%s@] %s\n", join('@', sort keys %flags), $file);

        next if (!defined($inode[2]));

		# add files to baskup list the backu flag is set 
		if (defined($flags{'B'})) {
			push(@{$self->{BackupList}}, $rfile);
#			printf "BACKUP %s\n", $rfile;
		}

		my $ref;

        $ref->{"package"}          = $package;
#        $ref->{"packagename"}      = $package;
#        $ref->{"packagetype"}      = "dir";
        $ref->{"mode"}             = $self->LsMode($inode[2]);

		$ref->{"full_path"}			= sprintf("%s/%s", $pwd, $rfile);

        # check if file is symlink
        if (S_ISLNK($inode[2]) && defined($flags{'L'})) {
            $ref->{"symlink"}      = readlink($rfile);
        } else {
            $ref->{"size"}         = $inode[7];
            $ref->{"mtime"}        = $inode[9];

            # user and group
            if (defined($inode[4]) && defined($flags{'U'})) {
                if (defined(getpwuid($inode[4]))) {
                    $ref->{"user"} = getpwuid($inode[4]);
                } else {
                    $ref->{"user"} = $inode[4];
                }
            }

            if (defined($inode[5]) && defined($flags{'G'})) {
                if (defined(getgrgid($inode[5]))) {
                    $ref->{"group"}    = getgrgid($inode[5]);
                } else {
                    $ref->{"group"}    = $inode[5];
                }
            }

            if (S_ISDIR($inode[2])) {
                $self->RecursiveScanDir($package, $rfile);
            } 
            if (!S_ISDIR($inode[2])) {
                if (!(S_ISLNK($inode[2]) || S_ISBLK($inode[2]) ||
                    S_ISCHR($inode[2]) || S_ISFIFO($inode[2]) ||
                    S_ISSOCK($inode[2]))) {
					my $sum = "";
					if (defined $self->{Checksum} && index($self->{Checksum}, "sha") != -1) {
	                    $sum  .= $self->ShaSum($rfile) if (defined($flags{'5'}));
					} 
					if (defined $self->{Checksum} && index($self->{Checksum}, "md5") != -1) {
	                    $sum  .= $self->Md5Sum($rfile) if (defined($flags{'5'}));
					} 

					$ref->{'md5'}  = $sum;
                }
            }
        }

		if (defined($self->{ScanHook})) {
			$self->{ScanHook}->($self, $file, $ref);
		}
		if (defined($self->{FilesRef})) {
			$self->{FilesRef}->{$file} = $ref;
		}
    }
}

=head2 ScanDir

Public interface:
Sacn direcotry and fill/add the $self->files structure
	$dir => start directory 
	@paths => paths definition

=cut

sub ScanDir {
	my ($self, $dir, $package) = @_;

	if (chdir $dir) {
		$self->RecursiveScanDir($package, "");
	} else {
		$self->{Log}->Error("ERR can not switch to the directory %s", $dir);
	}

}

=head2 GetFullPath

Returns full path to tgz archive
=cut

sub GetFullPath {
	my ($self, $pkg) = @_;

	my ($pkgdir) = $pkg; 
	# if the name of tha package start with / ignore the basedir:dir option     
	if  ($pkg !~ /^\/.+/) {
		($pkgdir) = $self->{Config}->GetVal("pkgdir");
		$pkgdir .= "/".$pkg;
	}

	# find the propper path for the package  and perform scanning 
	# test if the directory exists 
	if ( ! -d $pkgdir ) {
		$self->{Log}->Error("ERR the directory %s for package %s not found", $pkgdir, $pkg, $self->{HostId});
		return undef;
	} else {
		return $pkgdir;
	}
}

=head2 ScanPkg

Public interface:
Sacn directory/add the $self->files structure
	$pkg => package name
=cut

sub ScanPkg {
	my ($self, $pkg) = @_;

	my ($pkgdir) = $self->GetFullPath($pkg); 

	if ( defined($pkgdir) ) {
		$self->ScanDir($pkgdir, "dir:".$pkg);
		$self->{Log}->Debug(5, "Scanned dir package %s for %s (dir:%s)", $pkg, $self->{Config}->{SysName}, $pkgdir);
	}
}

=head2 GetTgzCmd

Public interface:
Returns command to create tzr gzip archive 
=cut
sub GetTgzCmd() {

	my ($self, $pkg) = @_;
	my $pkgdir = $self->GetFullPath($pkg);

    if (defined($pkgdir)) {
		return sprintf "tar -czf - --numeric-owner -C %s . ", $pkgdir;
    } 
	return undef;
}

1;


package Police::Paths;

use strict;
use warnings;

=head1 NAME

Paths - the class which allows manipulate with paths and allows evaluate flags

=head1 SYNOPSIS

=head1 DESCRIPTION

=head1 METHODS

=head2 new
 Condtructor - arg 
  new(Log => log_handle ); 
  Log => reference to log class 

=cut

sub new {
	my ($self, $hostid, %params) = @_;
	my ($class) = {};
	bless($class);

	# The structure where the paths are stored. There is the follow structure:
    #   Paths = [ <pattern>, <reg_pattern>, { flags }, match_count }
	$class->{Paths} = [ ];		

	# default rule
	$class->AddPath('[+UGM5TL]*');

	return $class;
}

sub DESTROY {
    my ($self) = @_;
}

=head2 Glob2Pat

Converts the shell pattern to the regexp pattern

=cut

sub Glob2Pat {
	my ($self, $globstr) = @_;

	my %patmap = (
		'*' => '.*',
		'?' => '.',
		'[' => '[',
		']' => ']',
	);
	$globstr =~ s{(.)} { $patmap{$1} || "\Q$1" }ge;
	return '^' . $globstr . '$';
}

# return hash with possitive flags set
# @ flags - input string with flags inf ormat [+x+x...]
# @ mask  - +      return only possive flags,
#           -      return only negative flags,
#           undef  return the positive and negative flags
sub GetFlags {
	my ($self, $flags, $mask) = @_;

	my %flags;

	$flags =~ s/^\[//;
	$flags =~ s/\]$//;

	my $sign = undef;
	foreach (split(//, $flags)) {
		# the sign symbol
		if ($_ eq "+" || $_ eq "-") {
			$sign = $_;
		} else {
			if (defined($sign) && (!defined($mask) || $sign eq $mask)) {
				$flags{uc($_)} = $sign;
			}
		}
	}

	return %flags;
}


# add flags into the path, compute flags to the path
# @ arg        - flags prefix also possible (eg. "/usr", "[+M+G]/usr", "[+M-G+U+T]", "[-M+T]", ...)
# return flags - result flags enclosed in []
# return path  - path in clear forrmat  - if input path not defined returns undef
#
sub AddPath {
	my ($self, $arg) = @_;

	my ($path, $repath) = (undef, undef);
	my %resflags;

	# try to split the path and flags from arguments
	if ($arg =~ /\[(.+)\](.+)/) {
		if (defined($2) && $2 ne "") {
			$path = $2;
			$repath = $self->Glob2Pat($2);
		}
		my %flags = $self->GetFlags($1);
		# add parset flags into array
		push(@{$self->{Paths}}, [ $path, $repath, { %flags } , 0 ] ); 
	} 

}


=head2 GetPathFlags

Returns flags list for the particular directory

=cut

# return flags for particular dir
# @ path
# @ hashref to path definition
# @ mast of flags to be returned (as simple string eg. 'ABM');
# return - hash array with positive flags
sub GetPathFlags {
	my ($self, $path, $mask) = @_;

	my %flags = ( );
	foreach my $ref (@{$self->{Paths}}) {

		if ($path =~ /$ref->[1]/) {
			# the path has been found - evaluate flags
			while (my ($flag, $sign) = each %{$ref->[2]}) {
				$flags{$flag} = $sign;
			}
			$ref->[3]++;
		}
	}

	foreach (keys %flags) { 
		delete($flags{$_}) if ( $flags{$_} eq '-' );
		delete($flags{$_}) if ( defined($mask) && index($mask, $_) < 0 );
	}

	return %flags;
}

=head2 GetUnmatchedPaths

Returns the list of the paths which hasn't been matched 

=cut

# return flags for particular dir
# return - array 
sub GetUnmatchedPaths {
	my ($self) = @_;

	my @paths = ();
	foreach my $ref (@{$self->{Paths}}) {
		push(@paths, $ref->[0]) if ($ref->[3] == 0);
	}

	return @paths;
}

1;
#!/usr/bin/perl -w 

use strict;
use warnings;
use XML::Parser;

my $VERSION		= "2018-10-15.002";
my $PVERSION	= "0.3";		# protocol version 

my @PATHS;
my @ERROR;
my %ACTIONS;
my $CHECKSUM	= "md5";		# checksum type
my $FH = undef;

##########################################################
# Handlers                                              #
##########################################################

# Handle to print scan result on the stdout
sub PrintFileXML($$) {
	my ($class, $file, $ref) = @_;

	my $atts = "";
	while (my ($key, $val) = each %{$ref}) {
		$atts .= sprintf("%s=\"%s\" ", $key, $val) if (defined($val));
	}
	# encode file name
	$file =~ s/([^-_.~A-Za-z0-9\/ \+\:\@])/sprintf("%%%02X", ord($1))/seg;
#	$file =~ s/([^-_.~A-Za-z0-9])/sprintf("%%%02X", ord($1))/seg;
	printf "\t\t<file name=\"%s\" %s/>\n", $file, $atts;
}

# XML server parsing hooks
sub client_handle_xml_begin {
	my ($expat, $element, %attrs ) = @_;
	my $path = join('/', (@{$expat->{'Context'}}, $element));

	if ($path eq 'server/actions/scan') {
		$ACTIONS{'scan'} = 1;
		$CHECKSUM = $attrs{'checksum'}	if (defined $attrs{'checksum'} );
	}

	$ACTIONS{'backup'} = 1	if ($path eq 'server/actions/backup');

	if ($path eq 'server/command') {
		my $cmd = $attrs{'cmd'};
		my $arg = $attrs{'arg'};
		my $error;

		printf "\t<messages><message>Processing %s %s</message></messages>\n", $cmd, $arg;

		if ( $cmd eq 'get' ) {
			close $FH if ( defined $FH );
			#open $FH, "| base64 -d > $arg.police";
			open $FH, "| base64 -d -i > $arg";
		} elsif ( $cmd eq 'chmod' || $cmd eq 'chown' ) {
			my @errs = `$cmd $arg 2>&1`;
			$error = join("\n", @errs);
		} elsif ( $cmd eq 'link') {
			my @errs = `ln -s -f $arg 2>&1`;
			$error = join("\n", @errs);
		} elsif ( $cmd eq 'mkdir') {
			my @errs = `mkdir $arg 2>&1`;
			$error = join("\n", @errs);
		} elsif ( $cmd eq 'exec') {
			my @errs = `$arg`;
			$error = join("\n", @errs);
		} elsif ( $cmd eq 'remove') {
			if ( -d $arg ) {
				my $ret = rmdir($arg);
				$error = sprintf("Dir %s can not be deleted (%s)", $arg, $!) if (!$ret);
			} else {
				my $ret = unlink($arg);
				$error = sprintf("File %s can not be deleted (%s)", $arg, $!) if (!$ret);
			}
		} else {
			$error = sprintf("Command %s is not supported by the client", $cmd);
		}

		if ( defined $error ) {
			printf "\t<errors><error>%s</error></errors>\n", $error;
		}
	}

	if ($path eq 'server/actions/services') {
		$ACTIONS{'services'} = 1;
	}

	if ($path eq 'server/actions/rpms') {
		$ACTIONS{'rpms'} = 1;
	}
}

sub client_handle_xml_end {
	my ($expat, $element, %attrs ) = @_;
	my $path = join('/', (@{$expat->{'Context'}}, $element));

	close $FH if ( defined $FH && $path eq 'server/command' ) ;
}

sub client_handle_xml_char {
	my ($expat, $element, %attrs) = @_;
	my $path = join('/', @{$expat->{'Context'}});

	push(@PATHS, $element)	if ($path eq 'server/paths/path');
	print $FH $element 	if ( defined $FH && $path eq 'server/command' ) ;
}


##########################################################
# Main body                                              #
##########################################################

my $Log =  Police::Log->new(ShowProgress => 0);

# create the client output 
printf "<client version=\"%s\">\n", $VERSION;
printf "\t<capabilites>\n";
printf "\t\t<scan/>\n";
printf "\t\t<backup/>\n";
printf "\t\t<command/>\n";
printf "\t\t<services/>\n";
printf "\t\t<rpms/>\n";
printf "\t</capabilites>\n";

# parse the XML input from the server
my $xmlhnd = new XML::Parser(Handlers => { 
				'Start' => \&client_handle_xml_begin , 
				'End' => \&client_handle_xml_end , 
				'Char' => \&client_handle_xml_char 
				});

my $res = $xmlhnd->parse(*STDIN, ErrorContext => 3);

# create class CScan which perform file scanning on the file system
my $Scan = Police::Scan::Dir->new(Log => $Log, ScanHook => \&PrintFileXML);

foreach (@PATHS) {
	$Scan->{Paths}->AddPath($_);
}

#############################################
# scan
#############################################
if (defined($ACTIONS{'scan'})) {
	print "\t<scan>\n";
	$Scan->{Checksum} = $CHECKSUM;
	$Scan->ScanDir("/");
	print "\t</scan>\n";
}

#############################################
# backup
#############################################
if (defined($ACTIONS{'backup'})) {
	print "\t<backup>\n";
	if (@{$Scan->{BackupList}}) {
		$ENV{"PATH"} = "/usr/bin";
		open FB, "| tar -c -z --no-recursion --numeric-owner -T- -f- | base64";
		#open FB, "| cat";
		foreach (@{$Scan->{BackupList}}) {
			my $path =  "";
			my (@patharr) = split('/', $_);
			foreach my $part (@patharr) {
				$path .= "/$part";
				printf FB "%s\n", substr($path, 1);
			}
#			printf FB "%s\n", $_;
		}
		close FB;
	}
#	printf "%s\n", join("\n", @{$Scan->{BackupList}});
	print "\t</backup>\n";
}

#############################################
# rpm list 
#############################################
if (defined($ACTIONS{'rpms'})) {
	print "\t<rpms>\n";
	#open RPM, "rpm -qa|"; 
	open RPM, "rpm -q -a --queryformat='%{N}-%{V}-%{R}.%{arch}\n'|"; 
	while (<RPM>) {
		chomp ;
		printf "\t\t\t<rpm name=\"%s\"/>\n", $_;
	}
	close RPM;
	print "\t</rpms>\n";
}

#############################################
# chkconfig list 
#############################################
if (defined($ACTIONS{'services'})) {
	print "\t<services>\n";
	open CHKCONFIG, "chkconfig  --list 2>/dev/null | grep \"0:\" |"; 
	while (<CHKCONFIG>) {
		chomp ;
		s/\d:off//g;
		s/:on//g;
		my ($service, @runlevels) = split(/\s+/);
		printf "<service name=\"%s\" levels=\"%s\"/>\n", $service, join("", @runlevels);
	}
	close CHKCONFIG;

	if ( -x "/usr/bin/systemctl" ) {
		open SYSTEMCTL, "/usr/bin/systemctl list-unit-files 2>/dev/null | grep enabled |";
		while (<SYSTEMCTL>) {
			if (/(.+)\..+\s+/) {
				printf "<service name=\"%s\" levels=\"3\"/>\n", $1;
			}
		}
	}


	print "\t</services>\n";
}

#############################################
# error processing
#############################################
if (@ERROR > 0) {
	print "\t<errors>\n";
	foreach (@ERROR) {
		chomp;
		printf "\t\t<error>%s</error>\n", $_ if ($_ ne "");
	}
	print "\t</errors>\n";
}


printf "</client>\n";

